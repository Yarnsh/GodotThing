[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

var ai_thread
var alive = true

var is_enemy

var target

var move = false
var move_point = Vector3(0,6,200)
var aim = false
var aim_close = false
var aim_target = null
var aim_point = Vector3(0,0,0)
var path = [Vector3(-100,10,200)]

var cdist = 100.0
var ddist = 400.0
var min_ddist = 100.0

onready var mech = $KinematicBody
onready var spatial = $Spatial
onready var ray = $RayCast

func setPath(p):
	path = p
	if (path.empty()):
		move = false
	else:
		move_point = p.pop_front()
		move = true

func setMovePoint(p):
	p = global.currentNav.get_closest_point(p)
	var me = global.currentNav.get_closest_point(mech.global_transform.origin)
	setPath(Array(global.currentNav.get_simple_path(me, p)))

func setAimPoint(p):
	aim_target = null
	aim_point = p
	aim = true

func setAimTarget(t):
	aim_target = t
	aim = (aim_target != null)

func _ready():
	is_enemy = is_in_group(\"enemy\")
	mech.dir = Vector3(0,0,0);
	
	ai_thread = Thread.new()
	ai_thread.start(self, \"_ai_process\")
	add_child(ai_thread)
	
	if (is_in_group(\"friendly\")):
		add_to_group(\"friendly_ready\")
	if (is_in_group(\"enemy\")):
		add_to_group(\"enemy_ready\")

func _aim_at_point(point, other_vel = Vector3(0,0,0)):
	#for projectile
	var solns = []
	var solnn = util.SolveBallisticArc(getAimPos(), 90.0, point, other_vel, 9.8, solns)
	
	if (solnn > 0):
		spatial.look_at_from_position(getAimPos(), getAimPos()+solns[0], Vector3(0,1,0))
		var r = spatial.rotation - mech.rotation;
		return mech.look(r.x, r.y)
	return false

func _aim_at_target(atarget):
	return _aim_at_point(atarget.getAimPos(), atarget.getVel())

func _ai_process(par): #gonna make this specifically for target defence to start
	while(alive):
		var adversaries
		if (is_enemy):
			adversaries = get_tree().get_nodes_in_group(\"friendly_ready\")
		else:
			adversaries = get_tree().get_nodes_in_group(\"enemy_ready\")
		
		aim = false
		target = null
		for a in adversaries:
			if (checkVisibility(a, 175)):
				#figure out who to target here
				#prioritize targets who are in critical range of thing you are defending
				target = a
		
		#do stuff to attack target or default actions here
		#if target is too far from defence point dont chase
		if (target != null):
			if ((getPos() - target.getPos()).length() <= 300):
				setAimTarget(target)
			else:
				setAimTarget(null)
			
			if (global.currentPOI == null || (global.currentPOI - target.getPos()).length() <= ddist):
				var v = (getPos() - target.getPos()).normalized()
				var v2 = target.getPos() + Vector3(v.x*cdist, v.y*cdist, v.z*cdist)
				setMovePoint(v2)
			else:
				var v = (target.getPos() - global.currentPOI).normalized()
				var v2 = global.currentPOI + Vector3(v.x*ddist, v.y*ddist, v.z*ddist)
				setMovePoint(v2)
		else:
			setAimTarget(null)
			if (global.currentPOI != null && move == false):
				var t = 2*PI*(rand_range(0.0,1.0))
				var r = (rand_range(min_ddist, ddist))
				var v = Vector3(r*cos(t), 0, r*sin(t)) + global.currentPOI
				setMovePoint(v)
		
		OS.delay_msec(250)

func _physics_process(delta):
	if (move):
		mech.dir = move_point - global.currentNav.get_closest_point(mech.translation)
		if (mech.dir.length() < 2.0):
			if (path.empty()):
				mech.dir = Vector3()
				move = false
			else:
				move_point = path.pop_front()
				mech.dir = move_point - global.currentNav.get_closest_point(mech.translation)
	else:
		mech.dir = Vector3()
	
	aim_close = false
	
	if (aim):
		if (aim_target != null):
			aim_close = _aim_at_target(aim_target)
		else:
			aim_close = _aim_at_point(aim_point)
	else:
		mech.look(0, 0)
	
	#if aiming at enemy and in good range and stuff
	if (is_enemy):
		aim_close = mech.aim(\"friendly_ready\") or aim_close
	else:
		aim_close = mech.aim(\"enemy_ready\") or aim_close
	
	
	if (aim and aim_close):
		mech.fireRight()
		mech.fireLeft()

func checkVisibility(other, distance = -1):
	var x = false
	if (distance < 0 || (other.getAimPos() - getAimPos()).length() <= distance):
		ray.translation = getAimPos()
		ray.cast_to = other.getAimPos() - getAimPos()
		ray.force_raycast_update()
		x = !ray.is_colliding()
	return x

func getAimPos():
	return mech.global_transform.origin + Vector3(0.0,5.0,0.0)
func getPos():
	return mech.global_transform.origin
func getVel():
	return mech.vel

func stop():
	set_physics_process(false)
	alive = false
	ai_thread.wait_to_finish()
	print(\"God bless the Queen\")
	queue_free()"

[node name="MechController" type="Node"]

script = SubResource( 1 )

[node name="Spatial" type="Spatial" parent="." index="0"]

[node name="RayCast" type="RayCast" parent="." index="1"]

enabled = false
exclude_parent = true
cast_to = Vector3( 0, -1, 0 )
collision_mask = 1
_sections_unfolded = [ "Transform" ]


