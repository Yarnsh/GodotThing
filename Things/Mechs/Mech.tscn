[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody

var id = -1
var is_ready = false

export(int, \"Adam Mk2\", \"Taurus\") var initLegs = 0
export(int, \"Adam Mk2\", \"HITMAN\") var initTorso = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initLWep1 = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initLWep2 = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initLWep3 = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initRWep1 = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initRWep2 = 0
export(int, \"None\", \"Gattling\", \"Howitzer\") var initRWep3 = 0
export(Color, RGB) var initC1 = Color(0,0,0)
export(String, FILE) var initP1 = \"res://Things/Patterns/plain.png\"
export(Color, RGB) var initC2 = Color(0,0,0)
export(String, FILE) var initP2 = \"res://Things/Patterns/plain.png\"

var in_menu = false

var dir = Vector3()

var accelspeed = 30
var rotspeed = 0.07
var deaccelspeed = 50
var vel = Vector3()
var slideVel = Vector3()
var speedLimit = 25

var intentSpeed = 10
var intentDir = Vector3(0,0,-1)

var leg_skeleton
var torso_skeleton

var torso_yaw_bone_id = 0
var torso_yaw_bone_transform = Transform()
var torso_yawspeed = 0.15
var yaw_torso_facing = Vector3(0,0,1)

var torso_pitch_bone_id = 0
var torso_pitch_bone_transform = Transform()
var torso_pitchspeed = 0.05
var pitch_torso_facing = Vector3(0,0,1)
var pitch_limit = 90.5

var leftWeaponSelected = 0
var leftWeaponNode = []
var leftWeaponFireRate = []
var leftWeaponCooldown = []
var leftWeaponCooldownBar

var rightWeaponSelected = 0
var rightWeaponNode = []
var rightWeaponFireRate = []
var rightWeaponCooldown = []
var rightWeaponCooldownBar

onready var animPlayer = $Model/AnimationTreePlayer
var floorStickRay
var floorNormal = Vector3(0,1,0)
var was_on_floor = false
var my_is_on_floor = false

var camera_y = 0.0
var camera_x = 0.0
var camera_ray_colliding = false
var camera_ray_point = Vector3(0,0,0)

var mat1 = SpatialMaterial.new()
var mat2 = SpatialMaterial.new()

func buildMech(legPart, bodyPart, lWepParts, rWepParts, color1, pattern1, color2, pattern2):
	var base_node = get_node(\"Model\")
	var legs = get_node(\"Model/Scene Root\")
	if (legs != null):
		legs.name = \"oldlegs\"
		legs.call_deferred(\"free\")
	
	legs = load(global.LEGS[legPart].path).instance()
	base_node.add_child(legs)
	var legs_skel = legs.get_node(\"leg_armature/Skeleton\")
	legs_skel.get_child(0).set_mesh(legs_skel.get_child(0).get_mesh().duplicate())
	var t_attach = BoneAttachment.new()
	t_attach.name = \"TorsoAttach\"
	legs_skel.add_child(t_attach)
	t_attach.set_bone_name(\"WaistConnection\")
	
	var torso = load(global.TORSOS[bodyPart].path).instance()
	t_attach.add_child(torso)
	var torso_skel = torso.get_node(\"body_armature/Skeleton\")
	torso_skel.get_child(0).set_mesh(torso_skel.get_child(0).get_mesh().duplicate())
	
	var leftWeps = []
	var rightWeps = []
	leftWeaponNode = []
	leftWeaponFireRate = []
	leftWeaponCooldown = []
	leftWeaponSelected = 0
	
	rightWeaponNode = []
	rightWeaponFireRate = []
	rightWeaponCooldown = []
	rightWeaponSelected = 0
	
	for i in range(0, torso_skel.get_bone_count()):
		var name = torso_skel.get_bone_name(i)
		if (name.begins_with(\"armW.L\")):
			leftWeps.append(name)
			leftWeaponNode.append(null)
			leftWeaponFireRate.append(1.0)
			leftWeaponCooldown.append(0.0)
		else: if (name.begins_with(\"armW.R\")):
			rightWeps.append(name)
			rightWeaponNode.append(null)
			rightWeaponFireRate.append(1.0)
			rightWeaponCooldown.append(0.0)
	
	for lname in leftWeps:
		var lw_attach = BoneAttachment.new()
		var index = lname.substr(lname.length()-1, 1).to_int()
		lw_attach.name = \"LeftWeapon\" + String(index)
		torso_skel.add_child(lw_attach)
		lw_attach.set_bone_name(lname)
		var lspatial = Spatial.new()
		lspatial.name = \"Spatial\"
		lw_attach.add_child(lspatial)
		var l_wep_part = load(lWepParts[index].path)
		leftWeaponFireRate[index] = lWepParts[index].fireRate
		leftWeaponCooldown[index] = leftWeaponFireRate[index]
		if (l_wep_part != null):
			lspatial.add_child(l_wep_part.instance())
	
	for rname in rightWeps:
		var rw_attach = BoneAttachment.new()
		var index = rname.substr(rname.length()-1, 1).to_int()
		rw_attach.name = \"RightWeapon\" + String(index)
		torso_skel.add_child(rw_attach)
		rw_attach.set_bone_name(rname)
		var rspatial = Spatial.new()
		rspatial.name = \"Spatial\"
		rw_attach.add_child(rspatial)
		var r_wep_part = load(rWepParts[index].path)
		rightWeaponFireRate[index] = rWepParts[index].fireRate
		rightWeaponCooldown[index] = rightWeaponFireRate[index]
		if (r_wep_part != null):
			rspatial.add_child(r_wep_part.instance())
			rspatial.get_node(\"Scene Root\").scale = Vector3(-1,1,1)
	
	_ready_nodes()
	
	var pattern = load(pattern1)
	#color 1
	var meshNode = leg_skeleton.get_child(0)
	var mesh = meshNode.get_mesh()
	mat1.set_albedo(color1)
	mat1.albedo_texture = pattern
	mesh.surface_set_material(1, mat1)
	
	meshNode = torso_skeleton.get_child(0)
	mesh = meshNode.get_mesh()
	mesh.surface_set_material(1, mat1)
	meshNode.set_mesh(mesh)
	
	pattern = load(pattern2)
	#color 2
	meshNode = leg_skeleton.get_child(0)
	mesh = meshNode.get_mesh()
	mat2.set_albedo(color2)
	mat2.albedo_texture = pattern
	mesh.surface_set_material(2, mat2)
	
	meshNode = torso_skeleton.get_child(0)
	mesh = meshNode.get_mesh()
	mesh.surface_set_material(2, mat2)

func _ready_nodes():
	leg_skeleton = get_node(\"Model/Scene Root/leg_armature/Skeleton\")
	
	torso_skeleton = get_node(\"Model/Scene Root/leg_armature/Skeleton/TorsoAttach/Scene Root/body_armature/Skeleton\")
	torso_yaw_bone_id = torso_skeleton.find_bone(\"Yaw\")
	torso_yaw_bone_transform = torso_skeleton.get_bone_pose(torso_yaw_bone_id)
	torso_pitch_bone_id = torso_skeleton.find_bone(\"Pitch\")
	torso_pitch_bone_transform = torso_skeleton.get_bone_pose(torso_pitch_bone_id)
	
	for i in range(0, leftWeaponNode.size()):
		leftWeaponNode[i] = get_node(\"Model/Scene Root/leg_armature/Skeleton/TorsoAttach/Scene Root/body_armature/Skeleton/LeftWeapon\" + String(i) + \"/Spatial\")
	
	for i in range(0, rightWeaponNode.size()):
		rightWeaponNode[i] = get_node(\"Model/Scene Root/leg_armature/Skeleton/TorsoAttach/Scene Root/body_armature/Skeleton/RightWeapon\" + String(i) + \"/Spatial\")
	
	floorStickRay = get_node(\"Model/FloorStickRay\")
	
	var aTreePlayer = get_node(\"Model/AnimationTreePlayer\")
	aTreePlayer.set_base_path(NodePath(\"../Scene Root\"))
	aTreePlayer.set_master_player(NodePath(\"../Scene Root/AnimationPlayer\"))
	aTreePlayer.animation_node_set_master_animation(\"anim\", \"Idle\");
	aTreePlayer.animation_node_set_master_animation(\"anim 2\", \"Walk-loop\");
	aTreePlayer.animation_node_set_master_animation(\"anim 3\", \"Run-loop\");
	
	is_ready = true


func getId():
	return id

func _ready():
	
	#buildMech(global.LEGS[0], global.TORSOS[0], {0:global.WEAPONS[0]}, {0:global.WEAPONS[0]}, Color(0,0,0), \"res://Things/Patterns/plain.png\", Color(0,0,0), \"res://Things/Patterns/plain.png\")
	buildMech(initLegs, initTorso, {0:global.WEAPONS[initLWep1],1:global.WEAPONS[initLWep2],2:global.WEAPONS[initLWep3]}, {0:global.WEAPONS[initRWep1],1:global.WEAPONS[initRWep2],2:global.WEAPONS[initRWep3]}, initC1, initP1, initC2, initP2)
	
	id = global.getId()
	

func nextLeftWeapon():
	leftWeaponSelected = (leftWeaponSelected + 1) % leftWeaponNode.size()
func getLeftWeapon():
	return leftWeaponSelected

func nextRightWeapon():
	rightWeaponSelected = (rightWeaponSelected + 1) % rightWeaponNode.size()
func getRightWeapon():
	return rightWeaponSelected

func _physics_process(delta):
	if (is_ready):
		
		dir = Vector3(dir.x, 0, dir.z)
		dir = dir.normalized()
		intentDir = global.closerDirVector(intentDir, dir, rotspeed)
		
		if (dir.length_squared() > 0.0):
			var proj = intentDir.dot(dir)
			if (proj > 0):
				proj = proj * accelspeed
			else:
				proj = proj * deaccelspeed
			intentSpeed = max(0, min(intentSpeed + proj*delta, speedLimit))
		else:
			intentSpeed = max(0, intentSpeed - deaccelspeed*delta)
		
		var floorDir = intentDir - (intentDir.dot(floorNormal) * floorNormal)
		floorDir = floorDir.normalized() #not sure if will use this or not
		
		
		if (intentDir.length_squared() > 0.0):
			look_at(translation + intentDir, Vector3(0.0,1.0,0.0))
		
		
		yaw_torso_facing = global.closerDirVector(yaw_torso_facing, Vector3(0,0,1).rotated(Vector3(0,-1,0), camera_y), torso_yawspeed)
		var limited_pitch = max(camera_x, -pitch_limit)
		limited_pitch = min(limited_pitch, pitch_limit)
		pitch_torso_facing = global.closerDirVector(pitch_torso_facing, Vector3(0,0,1).rotated(Vector3(1,0,0), limited_pitch), torso_pitchspeed)
		
		torso_skeleton.set_bone_pose(torso_yaw_bone_id, torso_yaw_bone_transform.rotated(Vector3(0,0,1), atan2(yaw_torso_facing.x, yaw_torso_facing.z)))
		torso_skeleton.set_bone_pose(torso_pitch_bone_id, torso_pitch_bone_transform.rotated(Vector3(1,0,0), atan2(pitch_torso_facing.y, pitch_torso_facing.z)))
		
		
		var stick = false
		if (floorStickRay.is_colliding()):
			stick = true
			move_and_collide(Vector3(0,-10,0))
		if (is_on_floor() or stick):
			if (!was_on_floor):
				slideVel = vel
			vel = (floorDir * intentSpeed)
			move_and_slide(vel,Vector3(0,1,0))
			slideVel = slideVel.normalized() * max(0, (slideVel.length() - deaccelspeed*delta))
			slideVel = move_and_slide(slideVel,Vector3(0,1,0))
			
			animPlayer.blend3_node_set_amount(\"walkBlend\", min(1.0, -1.0 + (2*intentSpeed/speedLimit)))
			was_on_floor = true
		else :
			if (was_on_floor):
				vel += slideVel
			intentSpeed = 0
			vel += Vector3(0,-9.8*delta,0)
			vel = move_and_slide(vel,Vector3(0,1,0))
			
			animPlayer.blend3_node_set_amount(\"walkBlend\", -1.0)
			was_on_floor = false
		
		for i in range(0, rightWeaponCooldown.size()):
			rightWeaponCooldown[i] -= delta
		#rightWeaponCooldownBar.value = (rightWeaponFireRate[rightWeaponSelected] - rightWeaponCooldown[rightWeaponSelected]) * 100 / rightWeaponFireRate[rightWeaponSelected]
		
		for i in range(0, leftWeaponCooldown.size()):
			leftWeaponCooldown[i] -= delta
		#leftWeaponCooldownBar.value = (leftWeaponFireRate[leftWeaponSelected] - leftWeaponCooldown[leftWeaponSelected]) * 100 / leftWeaponFireRate[leftWeaponSelected]

func fireRight():
	if (!in_menu and rightWeaponCooldown[rightWeaponSelected] <= 0.0):
		rightWeaponCooldown[rightWeaponSelected] = rightWeaponFireRate[rightWeaponSelected]
		rightWeaponNode[rightWeaponSelected].get_child(0).fire(id, true)

func fireLeft():
	if (!in_menu and leftWeaponCooldown[leftWeaponSelected] <= 0.0):
		leftWeaponCooldown[leftWeaponSelected] = leftWeaponFireRate[leftWeaponSelected]
		leftWeaponNode[leftWeaponSelected].get_child(0).fire(id)"

[sub_resource type="CapsuleShape" id=2]

radius = 1.90303
height = 2.81633

[node name="KinematicBody" type="KinematicBody"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.0113586 )
input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 2
collision_mask = 3
axis_lock_linear_x = false
axis_lock_linear_y = false
axis_lock_linear_z = false
axis_lock_angular_x = false
axis_lock_angular_y = false
axis_lock_angular_z = false
collision/safe_margin = 0.001
script = SubResource( 1 )
_sections_unfolded = [ "Axis Lock", "Collision", "Transform", "collision" ]
initLegs = 0
initTorso = 0
initLWep1 = 0
initLWep2 = 0
initLWep3 = 0
initRWep1 = 0
initRWep2 = 0
initRWep3 = 0
initC1 = Color( 0, 0, 0, 1 )
initP1 = "res://Things/Patterns/plain.png"
initC2 = Color( 0, 0, 0, 1 )
initP2 = "res://Things/Patterns/plain.png"

[node name="CollisionShape" type="CollisionShape" parent="." index="0"]

transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 3.17993, 0 )
shape = SubResource( 2 )
disabled = false
_sections_unfolded = [ "Transform" ]

[node name="Model" type="Spatial" parent="." index="1"]

_sections_unfolded = [ "Transform" ]

[node name="FloorStickRay" type="RayCast" parent="Model" index="0"]

enabled = true
exclude_parent = true
cast_to = Vector3( 0, -1, 0 )
collision_mask = 1

[node name="AnimationTreePlayer" type="AnimationTreePlayer" parent="Model" index="1"]

playback_process_mode = 0
master_player = NodePath("")
base_path = NodePath("")
active = true
data = {
"active": true,
"connections": [ "walkBlend", "out", 0, "anim", "walkBlend", 0, "anim 2", "walkBlend", 1, "anim 3", "walkBlend", 2 ],
"master": NodePath(""),
"nodes": [ {
"id": "out",
"position": Vector2( 624, 100 ),
"type": "output"
}, {
"animation": null,
"filter": [  ],
"id": "anim",
"position": Vector2( 80, 67 ),
"type": "animation"
}, {
"animation": null,
"filter": [  ],
"id": "anim 3",
"position": Vector2( 78, 299 ),
"type": "animation"
}, {
"animation": null,
"filter": [  ],
"id": "anim 2",
"position": Vector2( 78, 185 ),
"type": "animation"
}, {
"blend": -1.0,
"id": "walkBlend",
"position": Vector2( 345, 96 ),
"type": "blend3"
} ]
}
_sections_unfolded = [ "Playback" ]


