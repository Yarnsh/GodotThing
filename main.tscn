[gd_scene load_steps=6 format=2]

[ext_resource path="res://SnowGirl/snowcharacter.dae" type="PackedScene" id=1]

[sub_resource type="CubeMesh" id=3]

size = Vector3( 2, 2, 2 )
subdivide_width = 0
subdivide_height = 0
subdivide_depth = 0

[sub_resource type="BoxShape" id=4]

extents = Vector3( 1, 1, 1 )

[sub_resource type="GDScript" id=1]

script/source = "extends KinematicBody

var camspeed = 0.005
var movespeed = 3.0
var rotspeed = 0.05

var camrot = Vector3(0.0,0.0,0.0)
# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func closerDirVector(start, end, amount): #takes unit vectors only
	var axis = start.cross(end)
	if (!(axis.length_squared() > 0.0)):
		axis = Vector3(0.0,1.0,0.0)
	axis = axis.normalized()
	var endQ = Quat(axis, min(amount, abs(start.angle_to(end))))
	return endQ.xform(start)

func _ready():
	set_process_input(true)
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _input(event):
	if  (event.is_class(\"InputEventMouseMotion\")):
		camrot = camrot + (Vector3(-event.relative.y,-event.relative.x,0) * camspeed)
		camrot.y = fmod(camrot.y, 3.14159*2.0)

func _physics_process(delta):
	var dir = Vector3() # Where does the player intend to walk to
	
	if (Input.is_action_pressed(\"move_forward\")):
		dir += Vector3(0,0,-movespeed).rotated(Vector3(0,1,0), camrot.y)
	if (Input.is_action_pressed(\"move_backwards\")):
		dir += Vector3(0,0,movespeed).rotated(Vector3(0,1,0), camrot.y)
	if (Input.is_action_pressed(\"move_left\")):
		dir += Vector3(-movespeed,0,0).rotated(Vector3(0,1,0), camrot.y)
	if (Input.is_action_pressed(\"move_right\")):
		dir += Vector3(movespeed,0,0).rotated(Vector3(0,1,0), camrot.y)
	
	var currentfacing = Vector3(0.0,0.0,-1.0).rotated(Vector3(0.0,1.0,0.0), rotation.y)
	
	if (dir.length_squared() > 0.0):
		if (currentfacing.length_squared() > 0.0):
			look_at(translation + closerDirVector(currentfacing.normalized(), dir.normalized(), 0.1), Vector3(0.0,1.0,0.0))
	get_node(\"CameraSpatial\").rotation = camrot - Vector3(0.0, rotation.y, 0.0)
	
	var vel = move_and_slide(dir,Vector3(0,1,0))"

[sub_resource type="BoxShape" id=2]

extents = Vector3( 0.230781, 0.743553, 0.170021 )

[node name="Main" type="Node" index="0"]

[node name="StaticBody" type="StaticBody" parent="." index="0"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -6.11225 )
input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 1
collision_mask = 1
friction = 1.0
bounce = 0.0
constant_linear_velocity = Vector3( 0, 0, 0 )
constant_angular_velocity = Vector3( 0, 0, 0 )

[node name="MeshInstance" type="MeshInstance" parent="StaticBody" index="0"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 3 )
skeleton = NodePath("..")
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="StaticBody" index="1"]

shape = SubResource( 4 )
disabled = false

[node name="KinematicBody" type="KinematicBody" parent="." index="1"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.0113586 )
input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 1
collision_mask = 1
axis_lock_linear_x = false
axis_lock_linear_y = false
axis_lock_linear_z = false
axis_lock_angular_x = false
axis_lock_angular_y = false
axis_lock_angular_z = false
collision/safe_margin = 0.001
script = SubResource( 1 )

[node name="Model" parent="KinematicBody" index="0" instance=ExtResource( 1 )]

transform = Transform( -0.999932, 0, -0.0116925, 0, 1, 0, 0.0116925, 0, -0.999932, 0, -0.689446, 0.0113586 )

[node name="CollisionShape" type="CollisionShape" parent="KinematicBody" index="1"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0634729, 9.31323e-10 )
shape = SubResource( 2 )
disabled = false

[node name="CameraSpatial" type="Spatial" parent="KinematicBody" index="2"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.0113586 )

[node name="Camera" type="Camera" parent="KinematicBody/CameraSpatial" index="0"]

transform = Transform( 1, 0, 0, 0, 0.97897, 0.204004, 0, -0.204004, 0.97897, 0, 2.05205, 4.01673 )
keep_aspect = 1
cull_mask = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0
doppler_tracking = 0
projection = 0
current = false
fov = 70.0
size = 1.0
near = 0.05
far = 100.0


